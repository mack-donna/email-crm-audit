name: Claude Code Security Review

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**.py'
      - '**.js'
      - '**.ts'
      - '**.tsx'
      - '**.html'
  workflow_dispatch:
    inputs:
      review_scope:
        description: 'Review scope (changed_files or all_files)'
        required: false
        default: 'changed_files'
        type: choice
        options:
          - changed_files
          - all_files

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write

jobs:
  security-review:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better context

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install anthropic

    - name: Get changed files
      id: changed-files
      if: github.event_name == 'pull_request'
      uses: tj-actions/changed-files@v42
      with:
        files: |
          **.py
          **.js
          **.ts
          **.tsx
          **.html


    - name: Run Claude API security review
      id: security-scan
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        # Prepare files for review
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          FILES="${{ steps.changed-files.outputs.all_changed_files }}"
        else
          FILES=$(find . -type f \( -name "*.py" -o -name "*.js" -o -name "*.ts" \) -not -path "*/\.*" -not -path "*/node_modules/*" -not -path "*/venv/*")
        fi

        # Create results directory
        mkdir -p security-reports

        # Create main report header
        echo "# Claude Code Security Review Results" > security-reports/review.md
        echo "" >> security-reports/review.md
        echo "**Reviewed at**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> security-reports/review.md
        echo "**Trigger**: ${{ github.event_name }}" >> security-reports/review.md
        echo "" >> security-reports/review.md

        if [ -z "$FILES" ]; then
          echo "No files to review" >> security-reports/review.md
        else
          # Run Claude API security analysis
          python .github/scripts/claude_security_review.py $FILES || echo "Claude analysis completed with warnings"

          # Append Claude analysis to main report (find hash-based filename)
          CLAUDE_REPORT=$(find security-reports -name "claude-analysis-*.md" -type f 2>/dev/null | head -1)
          if [ -n "$CLAUDE_REPORT" ] && [ -f "$CLAUDE_REPORT" ]; then
            cat "$CLAUDE_REPORT" >> security-reports/review.md
          fi
        fi

        # Set output for next steps
        echo "report_path=security-reports/review.md" >> $GITHUB_OUTPUT
      continue-on-error: true

    - name: Run Python security linters
      run: |
        # Install security linting tools
        pip install bandit safety

        echo "## Python Security Scan (Bandit)" >> security-reports/review.md
        echo '```' >> security-reports/review.md
        bandit -r . -f txt -o security-reports/bandit.txt -x ./venv,./node_modules || true
        cat security-reports/bandit.txt >> security-reports/review.md 2>/dev/null || echo "No Bandit results"
        echo '```' >> security-reports/review.md

        echo "## Dependency Vulnerabilities (Safety)" >> security-reports/review.md
        echo '```' >> security-reports/review.md
        safety check --json > security-reports/safety.json 2>&1 || true
        cat security-reports/safety.json >> security-reports/review.md 2>/dev/null || echo "No Safety results"
        echo '```' >> security-reports/review.md
      continue-on-error: true

    - name: Manual security checks
      run: |
        echo "" >> security-reports/review.md
        echo "## Manual Security Checks" >> security-reports/review.md
        echo "" >> security-reports/review.md

        # Check for hardcoded secrets patterns
        echo "### Hardcoded Secrets Scan" >> security-reports/review.md
        echo '```' >> security-reports/review.md

        # Look for common secret patterns
        grep -rn --include="*.py" --include="*.js" --include="*.env" \
          -e "password\s*=\s*['\"][^'\"]\+['\"]" \
          -e "api_key\s*=\s*['\"][^'\"]\+['\"]" \
          -e "secret\s*=\s*['\"][^'\"]\+['\"]" \
          -e "token\s*=\s*['\"][^'\"]\+['\"]" \
          -e "AWS_ACCESS_KEY" \
          -e "ANTHROPIC_API_KEY\s*=\s*['\"]" \
          . 2>/dev/null || echo "âœ… No obvious hardcoded secrets found"

        echo '```' >> security-reports/review.md
        echo "" >> security-reports/review.md

        # Check for dangerous functions
        echo "### Dangerous Function Usage" >> security-reports/review.md
        echo '```' >> security-reports/review.md

        grep -rn --include="*.py" \
          -e "eval(" \
          -e "exec(" \
          -e "os.system(" \
          -e "__import__" \
          -e "pickle.loads(" \
          . 2>/dev/null || echo "âœ… No dangerous functions found"

        echo '```' >> security-reports/review.md
      continue-on-error: true

    - name: Generate security summary
      run: |
        echo "" >> security-reports/review.md
        echo "---" >> security-reports/review.md
        echo "" >> security-reports/review.md
        echo "## Review Complete" >> security-reports/review.md
        echo "" >> security-reports/review.md
        echo "This automated security review was performed by Claude Code." >> security-reports/review.md
        echo "For questions or to report false positives, please contact the security team." >> security-reports/review.md

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-review-report
        path: security-reports/
        retention-days: 90

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const reportPath = 'security-reports/review.md';

          if (fs.existsSync(reportPath)) {
            const report = fs.readFileSync(reportPath, 'utf8');

            // Truncate if too long for PR comment
            const maxLength = 65000;
            let comment = report;

            if (comment.length > maxLength) {
              comment = comment.substring(0, maxLength) + '\n\n... (truncated, see full report in artifacts)';
            }

            // Post comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

    - name: Add to job summary
      if: always()
      run: |
        cat security-reports/review.md >> $GITHUB_STEP_SUMMARY

    - name: Check for critical vulnerabilities
      run: |
        # Fail the build if critical issues are found
        if grep -q "ðŸ”´ CRITICAL" security-reports/review.md; then
          echo "::error::Critical security vulnerabilities detected! Review the security report."
          exit 1
        fi
      continue-on-error: true
